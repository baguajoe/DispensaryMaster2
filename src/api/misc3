@api.route('/pos/payment', methods=['POST'])
@jwt_required()
def process_payment():
    data = request.json
    order_id = data.get('order_id')
    payments = data.get('payments', [])  # Example: [{"method": "cash", "amount": 50}, {"method": "credit", "amount": 25}]
    
    if not payments:
        return jsonify({"error": "No payment methods provided"}), 400

    order = Order.query.get_or_404(order_id)
    total_paid = sum(payment['amount'] for payment in payments)
    
    if total_paid < order.total_amount:
        return jsonify({"error": "Insufficient payment"}), 400

    for payment in payments:
        PaymentLog(
            order_id=order.id,
            payment_method=payment['method'],
            amount=payment['amount']
        )
        db.session.add(payment_log)
    
    order.status = "completed"
    db.session.commit()
    
    return jsonify({"message": "Payment processed successfully", "order": order.serialize()}), 200

@api.route('/pos/receipt/<int:order_id>', methods=['GET'])
@jwt_required()
def generate_receipt(order_id):
    order = Order.query.get_or_404(order_id)
    items = OrderItem.query.filter_by(order_id=order.id).all()

    buffer = BytesIO()
    pdf = canvas.Canvas(buffer)
    pdf.drawString(100, 750, f"Receipt for Order #{order.id}")
    pdf.drawString(100, 730, "---------------------------")

    y = 710
    for item in items:
        pdf.drawString(100, y, f"{item.product.name} (x{item.quantity}): ${item.unit_price}")
        y -= 20

    pdf.drawString(100, y - 20, f"Total: ${order.total_amount}")
    pdf.save()

    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name=f"receipt_{order.id}.pdf", mimetype='application/pdf')


@api.route('/pos/offline-transactions', methods=['POST'])
@jwt_required()
def sync_offline_transactions():
    data = request.json.get("transactions", [])
    if not data:
        return jsonify({"error": "No transactions to sync"}), 400

    for transaction in data:
        order = Order(**transaction.get("order"))
        db.session.add(order)
        db.session.flush()

        for item in transaction.get("items", []):
            order_item = OrderItem(order_id=order.id, **item)
            db.session.add(order_item)

    db.session.commit()
    return jsonify({"message": "Offline transactions synced successfully"}), 200


@api.route('/pos/reports', methods=['GET'])
@jwt_required()
def generate_pos_reports():
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")
    
    query = Order.query.filter(Order.created_at.between(start_date, end_date))
    total_sales = sum(order.total_amount for order in query)
    total_orders = query.count()
    top_products = db.session.query(
        Product.name, func.sum(OrderItem.quantity).label('quantity_sold')
    ).join(OrderItem, Product.id == OrderItem.product_id)\
     .group_by(Product.name)\
     .order_by(func.sum(OrderItem.quantity).desc())\
     .limit(5).all()

    return jsonify({
        "total_sales": total_sales,
        "total_orders": total_orders,
        "top_products": [{"name": p[0], "quantity": p[1]} for p in top_products]
    }), 200
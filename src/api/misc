@api.route('/cart', methods=['POST'])
@jwt_required()
def add_to_cart():
    user_id = get_jwt_identity()
    data = request.json
    product = Product.query.get_or_404(data['product_id'])

    # Validate stock availability
    quantity_requested = data.get('quantity', 1)
    if product.current_stock < quantity_requested:
        return jsonify({"error": "Insufficient stock for this product"}), 400

    # Deduct stock
    try:
        product.current_stock -= quantity_requested
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": "Failed to update stock"}), 500

    # Check if the customer has an existing cart
    cart = Cart.query.filter_by(customer_id=user_id).first()
    if not cart:
        cart = Cart(customer_id=user_id)
        db.session.add(cart)
        db.session.flush()

    # Add the item to the cart
    try:
        cart_item = CartItem(
            cart_id=cart.id,
            product_id=product.id,
            quantity=quantity_requested
        )
        db.session.add(cart_item)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        # Rollback stock deduction if cart operation fails
        product.current_stock += quantity_requested
        db.session.commit()
        return jsonify({"error": "Failed to add item to cart"}), 500

    return jsonify(cart.serialize()), 201



@api.route('/cart/save_for_later', methods=['POST'])
@jwt_required()
def save_for_later():
    data = request.json
    user_id = get_jwt_identity()  # Get the current user's ID

    # Check if the cart item exists
    cart_item = Cart.query.filter_by(user_id=user_id, product_id=data['product_id']).first()
    if not cart_item:
        return jsonify({"error": "Cart item not found"}), 404

    # Move item to "saved for later"
    saved_item = SavedForLater(
        user_id=user_id,
        product_id=cart_item.product_id,
        quantity=cart_item.quantity,
    )
    db.session.add(saved_item)
    db.session.delete(cart_item)
    db.session.commit()

    return jsonify({"message": "Item saved for later"}), 201

@api.route('/cart/apply_discount', methods=['POST'])
@jwt_required()
def apply_discount():
    data = request.json
    user_id = get_jwt_identity()  # Get the current user's ID

    # Validate the discount code
    discount = Discount.query.filter_by(code=data['code'], is_active=True).first()
    if not discount:
        return jsonify({"error": "Invalid or expired discount code"}), 400

    # Calculate discount
    cart_items = Cart.query.filter_by(user_id=user_id).all()
    total = sum(item.quantity * item.product.unit_price for item in cart_items)
    discount_amount = total * (discount.percentage / 100)

    return jsonify({
        "message": "Discount applied",
        "original_total": total,
        "discount": discount_amount,
        "new_total": total - discount_amount,
    }), 200


@api.route('/cart/<int:item_id>', methods=['DELETE'])
@jwt_required()
def remove_from_cart(item_id):
    item = Cart.query.get_or_404(item_id)
    db.session.delete(item)
    db.session.commit()
    return jsonify({"message": "Item removed from cart"}), 200

@api.route('/cart/<int:item_id>', methods=['PATCH'])
@jwt_required()
def update_cart_item(item_id):
    data = request.json
    item = Cart.query.get_or_404(item_id)
    if 'quantity' in data:
        item.quantity = data['quantity']
    db.session.commit()
    return jsonify(item.serialize()), 200

@api.route('/cart', methods=['GET'])
@jwt_required()
def get_cart():
    user_id = get_jwt_identity()
    cart = Cart.query.filter_by(customer_id=user_id).first()
    if not cart:
        return jsonify({"error": "Cart not found"}), 404
    return jsonify(cart.serialize()), 200


@api.route('/cart/<int:item_id>', methods=['DELETE'])
@jwt_required()
def delete_cart_item(item_id):
    cart_item = CartItem.query.get_or_404(item_id)
    db.session.delete(cart_item)
    db.session.commit()
    return jsonify({"message": "Item removed from cart"}), 200

@api.route('/cart/clear', methods=['DELETE'])
@jwt_required()
def clear_cart():
    user_id = get_jwt_identity()
    cart = Cart.query.filter_by(customer_id=user_id).first()
    if not cart:
        return jsonify({"error": "Cart not found"}), 404
    db.session.delete(cart)
    db.session.commit()
    return jsonify({"message": "Cart cleared successfully"}), 200
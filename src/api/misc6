@api.route('/subscriptions', methods=['GET'])
@jwt_required()
def get_subscriptions():
    user_id = get_jwt_identity()
    subscriptions = Subscription.query.filter_by(customer_id=user_id).all()
    return jsonify([sub.serialize() for sub in subscriptions]), 200

@api.route('/subscriptions/<int:sub_id>', methods=['GET'])
@jwt_required()
def get_subscription_details(sub_id):
    subscription = Subscription.query.get_or_404(sub_id)
    return jsonify(subscription.serialize()), 200

@api.route('/subscriptions', methods=['POST'])
@jwt_required()
def create_subscription():
    user_id = get_jwt_identity()
    data = request.json
    new_subscription = Subscription(customer_id=user_id, **data)
    db.session.add(new_subscription)
    db.session.commit()
    return jsonify(new_subscription.serialize()), 201

@api.route('/subscriptions/<int:sub_id>', methods=['PUT'])
@jwt_required()
def update_subscription(sub_id):
    subscription = Subscription.query.get_or_404(sub_id)
    data = request.json
    for key, value in data.items():
        setattr(subscription, key, value)
    db.session.commit()
    return jsonify(subscription.serialize()), 200

@api.route('/subscriptions/<int:sub_id>', methods=['DELETE'])
@jwt_required()
def delete_subscription(sub_id):
    subscription = Subscription.query.get_or_404(sub_id)
    db.session.delete(subscription)
    db.session.commit()
    return jsonify({"message": "Subscription deleted successfully"}), 200
# dashboard

    
@api.route('/dashboard/metrics', methods=['GET'])
@jwt_required()
@handle_errors
def get_dashboard_metrics():
    # Query parameter to toggle between formats
    format_type = request.args.get('format', 'user_friendly')  # Default to 'user_friendly'

    try:
        # Shared Data
        orders = Order.query.filter(Order.status == 'completed').all()
        total_sales = sum(float(order.total_amount) for order in orders)
        order_count = len(orders)
        average_order_value = total_sales / order_count if order_count > 0 else 0

        low_stock_products = Product.query.filter(Product.current_stock <= Product.reorder_point).all()
        top_products = Product.query.order_by(Product.sales.desc()).limit(5).all()

        total_customers = Customer.query.count()
        top_customer = db.session.query(Customer).join(Order).group_by(Customer.id).order_by(db.func.sum(Order.total_amount).desc()).first()

        # User-Friendly Metrics
        if format_type == 'user_friendly':
            metrics = [
                 {"title": "Total Sales", "value": f"${total_sales:,.2f}"},
            {"title": "Average Purchase Order", "value": f"${average_purchase_order:,.2f}"},
            { "title": "Average Purchase Order", "value": "$180", "icon": "🛒", "trend": 2, "bgColor": "bg-yellow-100", "textColor": "text-yellow-900" },
            { "title": "Users", "value": "1,345", "icon": "👤", "trend": 15, "bgColor": "bg-purple-100", "textColor": "text-purple-900" },
            { "title": "Refunds", "value": "$320", "icon": "💸", "trend": -3, "bgColor": "bg-red-100", "textColor": "text-red-900" },
            { "title": "Product Availability", "value": "93%", "icon": "📊", "trend": 1, "bgColor": "bg-teal-100", "textColor": "text-teal-900" },
            { "title": "Supply Below Safety Stock", "value": "8", "icon": "📉", "trend": -2, "bgColor": "bg-gray-100", "textColor": "text-gray-900" },
            { "title": "Invoices", "value": "295", "icon": "🧾", "trend": 7, "bgColor": "bg-indigo-100", "textColor": "text-indigo-900" },
            { "title": "Today's Invoice", "value": "28", "icon": "📆", "trend": 3, "bgColor": "bg-orange-100", "textColor": "text-orange-900" },
            { "title": "Current Monthly", "value": "$22,560", "icon": "📅", "trend": 10, "bgColor": "bg-green-100", "textColor": "text-green-900" },
            { "title": "Inventory", "value": "965", "icon": "📦", "trend": 4, "bgColor": "bg-blue-100", "textColor": "text-blue-900" },
            { "title": "Stores", "value": "4", "icon": "🏬", "trend": 0, "bgColor": "bg-yellow-100", "textColor": "text-yellow-900" },
            ]
            return jsonify(metrics), 200

        # Data-Centric Metrics
        elif format_type == 'data_centric':
            return jsonify({
                "sales": {
                    "total_sales": total_sales,
                    "order_count": order_count,
                    "average_order_value": round(average_order_value, 2)
                },
                "inventory": {
                    "low_stock_count": len(low_stock_products),
                    "top_products": [{"name": p.name, "sales": p.sales} for p in top_products]
                },
                "customers": {
                    "total_customers": total_customers,
                    "top_customer": {
                        "id": top_customer.id if top_customer else None,
                        "name": f"{top_customer.first_name} {top_customer.last_name}" if top_customer else None,
                        "total_spent": round(top_customer.total_spent, 2) if top_customer else None
                    }
                }
            }), 200
        else:
            return jsonify({"error": "Invalid format type"}), 400

    except Exception as e:
        return jsonify({"error": str(e)}), 500

    
@api.route('/dashboard/analytics', methods=['GET'])
def get_dashboard_analytics():
    try:
        # Example data - Replace with your database queries
        total_sales = db.session.query(func.sum(Order.total_amount)).scalar() or 0
        total_orders = db.session.query(func.count(Order.id)).scalar() or 0
        average_order_value = total_sales / total_orders if total_orders else 0
        top_products = db.session.query(
            Product.name, func.sum(OrderItem.quantity).label("total_quantity")
        ).join(OrderItem, Product.id == OrderItem.product_id)\
         .group_by(Product.name)\
         .order_by(func.sum(OrderItem.quantity).desc())\
         .limit(5).all()

        # Real-time data format
        response = {
            "total_sales": f"${total_sales:,.2f}",
            "total_orders": total_orders,
            "average_order_value": f"${average_order_value:,.2f}",
            "top_products": [{"name": p[0], "quantity": p[1]} for p in top_products],
        }

        return jsonify(response), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@api.route('/dashboard/layout', methods=['POST'])
@login_required
def save_layout():
    data = request.json
    user_id = current_user.id
    layout = data.get('layout')
    # Save the layout to the database
    db.session.execute(
        "UPDATE user_settings SET dashboard_layout = :layout WHERE user_id = :user_id",
        {"layout": json.dumps(layout), "user_id": user_id},
    )
    db.session.commit()
    return jsonify({"message": "Layout saved successfully"}), 200

@api.route('/dashboard/layout', methods=['GET'])
@login_required
def get_layout():
    user_id = current_user.id
    layout = db.session.execute(
        "SELECT dashboard_layout FROM user_settings WHERE user_id = :user_id",
        {"user_id": user_id},
    ).fetchone()
    return jsonify({"layout": layout}), 200